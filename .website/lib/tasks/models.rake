namespace :gemini do
  namespace :models do

    desc "Generate Rails models based on Gemini code and models.yml"
    task :update => :environment do
      Gemini::ModelUpdater.new.generate_rails_models
      puts "Models updated."
    end

  end
end

module Gemini
  class ModelUpdater
    def gemini_root_dir
      @gemini_root_dir ||= File.expand_path('..', Dir.getwd())
    end

    def model_class_names
      @model_class_names ||= begin
        tables = ActiveRecord::Base.connection.tables - ['schema_migrations', 'ar_internal_metadata']
        tables.map(&:classify)
      end
      return @model_class_names
    end

    def scan_associations
      associations = Hash.new { |h, k| h[k] = [] }

      model_class_names.each do |model|
        column_names = ActiveRecord::Base.connection.columns(model.tableize).map(&:name)
        foreign_keys = column_names.select { |n| n.ends_with?('_id') }
        foreign_key_models = foreign_keys.map { |fk| fk[0..-4].classify }.select { |bt| model_class_names.include?(bt) }

        foreign_key_models.each do |foreign_key_model|
          associations[model].push "belongs_to :#{foreign_key_model.underscore}, optional: true"
          associations[foreign_key_model.classify].push "has_many :#{model.pluralize.underscore}"
        end

        foreign_key_models.combination(2).each do |left, right|
          left_to_right = "has_many :#{right.pluralize.underscore}, through: :#{model.pluralize.underscore}"
          associations[left].push  left_to_right
          associations[right].push "has_many :#{left.pluralize.underscore}, through: :#{model.pluralize.underscore}"
        end

        associations[model].uniq!
      end

      associations
    end

    def generate_rails_models
      associations = scan_associations
      model_class_names.each { |model_class_name| generate_rails_model(model_class_name, associations[model_class_name]) }
    end

    def resource_folder_for(model_class_name)
      File.join(gemini_root_dir, model_class_name.pluralize.underscore).downcase
    end

    def gemini_model_filename(model_class_name)
      File.join(resource_folder_for(model_class_name), 'model.rb')
    end

    def generate_rails_model(model_class_name, associations)
      gemini_code = read_gemini_code(model_class_name)
      write_rails_model(model_class_name) do |file|
        associations.each { |line| file.puts line.indent(2) }
        file.puts if associations.any? && gemini_code.any?
        gemini_code.each { |line| file.puts line.indent(2) }
      end
    end

    def read_gemini_code(model_class_name)
      filename = gemini_model_filename(model_class_name)
      if File.exist?(filename)
        File.readlines(filename).reject(&:blank?)
      else
        []
      end
    end

    def write_rails_model(model_class_name)
      filename = File.join(gemini_root_dir, '.website', 'app/models', "#{model_class_name.underscore}.rb")

      File.open(filename, "w") do |f|
        f.puts "# DO NOT EDIT THIS FILE.  This file is automatically regenerated as needed."
        f.puts "class #{model_class_name} < ApplicationRecord\n\n"

        yield(f)

        f.puts "\nend"
      end
    end
  end
end
